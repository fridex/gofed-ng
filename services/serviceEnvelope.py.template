#!/bin/python
# ####################################################################
# gofed-ng - Golang system
# Copyright (C) 2016  Fridolin Pokorny, fpokorny@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# ####################################################################

from plumbum import cli
from rpyc import Service
from rpyc.utils.server import ThreadPoolServer
from rpyc.utils.classic import DEFAULT_SERVER_PORT
from rpyc.utils.registry import REGISTRY_PORT
from rpyc.utils.registry import UDPRegistryClient, TCPRegistryClient
from rpyc.lib import setup_logger
from common.helpers.version import VERSION

try:
	from configparser import ConfigParser
except ImportError:
	from ConfigParser import ConfigParser

from service import {{ param['name'] }}

class ServiceServer(cli.Application):
	PROGNAME = "{{ param['name'] }}"
	VERSION = VERSION

	port = cli.SwitchAttr(["-p", "--port"], cli.Range(0, 65535), default = None,
		help="The TCP listener port; default = %s" %
			(DEFAULT_SERVER_PORT), group = "Socket Options")
	host = cli.SwitchAttr(["-h", "--host"], str, default = "", help = "The host to bind to. "
		"The default is INADDR_ANY", group = "Socket Options")
	ipv6 = cli.Flag(["--ipv6", "-6"], help = "Enable IPv6", group = "Socket Options")

	logfile = cli.SwitchAttr(["-l", "--logfile"], str, default = None, help="Specify the log file to use; "
		"the default is stderr", group = "Logging")
	quiet = cli.Flag(["-q", "--quiet"], help = "Quiet mode (only errors will be logged)",
		group = "Logging")

	auto_register = cli.Flag("--register", help = "Asks the server to attempt registering with "
		"a registry server. By default, the server will not attempt to register",
		group = "Registry")
	registry_type = cli.SwitchAttr("--registry-type", cli.Set("UDP", "TCP"),
		default = "UDP", help="Specify a UDP or TCP registry", group = "Registry")
	registry_port = cli.SwitchAttr("--registry-port", cli.Range(0, 65535), default=REGISTRY_PORT,
		help = "The registry's UDP/TCP port", group = "Registry")
	registry_host = cli.SwitchAttr("--registry-host", str, default = None,
		help = "The registry host machine. For UDP, the default is 255.255.255.255; "
		"for TCP, a value is required", group = "Registry")

	max_client_count = cli.SwitchAttr(["-c", "--client-count"], cli.Range(1, 1024), default = 20,
		help="Maximum number of clients that can be served at the same time; default: 20",
		group = "Client Connection Restriction")
	max_requests_per_client = cli.SwitchAttr(["-r", "--request-per-client"], cli.Range(1, 1024), default = 10,
		help="Maximum number of requests from one client; default: 10")

	@cli.switch("--config", str, excludes = ['-p', '-h', '-l', '--register', '--registry-type', '--registry-host', '-c'])
	def config(self, config):
		''' Use config instead of command line arguments'''
		if config:
			conf = ConfigParser({
	 			'ipv6': "False",
	 			'host': "localhost",
	 			'port': "118822",
	 			'logfile': "service.log",
				'register': "False",
				'registry-type': "UDP",
				'registry-port': "18811",
				'registry-host': "localhost",
				'max-client-count': "20",
				'max-requests-per-client': "10"
				})
			conf.read(config)

		self.mode = conf.get("{{ param['str'] }}", "mode").lower()
		if self.mode not in ["threaded", "forking"]:
			raise ValueError("Invalid mode %r" % self.mode)

	 	self.ipv6 = conf.getboolean('{{ param['str'] }}', "ipv6")
	 	self.host = conf.get('{{ param['str'] }}', "host")
	 	self.port = conf.getint('{{ param['str'] }}', "port")
	 	self.logfile = conf.get('{{ param['str'] }}', "logfile")
		self.auto_register = conf.getboolean('{{ param['str'] }}', "register")
		self.registry_type = conf.get('{{ param['str'] }}', "registry-type")
		self.registry_port = conf.getint('{{ param['str'] }}', "registry-port")
		self.registry_host = conf.get('{{ param['str'] }}', "registry-host")
		self.max_client_count = conf.get('{{ param['str'] }}', "max-client-count")
		self.max_requests_per_client = conf.get('{{ param['str'] }}', "max-requests-per-client")

	def main(self):
		if self.registry_type == "UDP":
			if self.registry_host is None:
				self.registry_host = "255.255.255.255"
			self.registrar = UDPRegistryClient(ip = self.registry_host, port = self.registry_port)
		else:
			if self.registry_host is None:
				raise ValueError("With TCP registry, you must specify --registry-host")
			self.registrar = TCPRegistryClient(ip = self.registry_host, port = self.registry_port)

		if self.port is None:
			self.port = default_port

		setup_logger(self.quiet, self.logfile)

		t = ThreadPoolServer({{ param['name'] }}, hostname = self.host, port = self.port,
			reuse_addr = True, ipv6 = self.ipv6,
			registrar = self.registrar, auto_register = self.auto_register,
			nbThreads = self.max_client_count, requestBatchSize = self.max_requests_per_client)
		t.start()

if __name__ == "__main__":
	ServiceServer.run()

