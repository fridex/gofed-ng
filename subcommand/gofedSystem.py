#!/bin/python
# gofed-ng - Golang system
# Copyright (C) 2016  Fridolin Pokorny, fpokorny@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# ####################################################################

import sys
import os
import json
from plumbum import cli
from common.helpers.utils import get_user, get_hostname, json_pretty_format, get_time_str
from common.system.system import System
from common.helpers.version import VERSION

DEFAULT_SYSTEM_JSON_PATH = "system.json"


class GofedSystem(cli.Application):
    VERSION = VERSION
    DESCRIPTION = "gofed system client"

    system_json_path = cli.SwitchAttr("--system", str,
                                      help="system.json file for gofed system",
                                      default=DEFAULT_SYSTEM_JSON_PATH)

    status = cli.Flag("--status",
                      help="generate a status.json file")

    def _generate_status(self):
        ret = {
            "author": get_user(),
            "generated": get_time_str(),
            "gofed_version": VERSION,
            "hostname": get_hostname(),
            "topology": []
        }
        system = System(None, self.get_system_json_path())

        for service_name in system.get_services_list():
            for response in system.get_service_location(service_name):
                ret['topology'].append({
                    'service': service_name,
                    'host': response[0],
                    'port': response[1],
                    'type': 'computational' if system.is_computational(service_name) else 'storage'
                })

        # TODO: give actual ip and port
        ret['topology'].append({
            'type': 'registry',
            'ip': 'localhost',
            'port': 18811,
        })

        print json_pretty_format(ret)

    def get_config(self):
        return self.parent.get_config()

    def get_system_json_path(self):
        return self.system_json_path

    def main(self):
        if self.status and not self.nested_command:
            self._generate_status()
        elif self.nested_command is None:
            self.help()
            return 1

# autogenerated scenarios
import scenarios
path = os.path.dirname(os.path.abspath(__file__))
execfile(os.path.join(path, 'load_scenarios.py'))

if __name__ == "__main__":
    sys.exit(1)
